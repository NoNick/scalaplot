{"name":"scalaplot","tagline":"Library to plot simple graphs using a Scala frontend.","body":"scalaplot\r\n=========\r\n\r\nThis is a library for quick and easy plotting of simple plots (such as XY line plots, scatter plots) and supports outputs using different engines (currently Gnuplot and JFreeGraph).\r\n\r\n**Note:** The project is still in *beta*. If you just need a clean way to interface Java with gnuplot, see [gnujavaplot](http://gnujavaplot.sourceforge.net/JavaPlot/About.html).\r\n\r\n## Requirements\r\n\r\n- maven\r\n- *for gnuplot*: [gnuplot 4.6](http://www.gnuplot.info/) with pdf support (on the mac+[homebrew](http://mxcl.github.com/homebrew/), `brew install pdflib-lite gnuplot`)\r\n\r\n## Installation\r\n\r\n### Maven dependency\r\n\r\nThe easiest (and recommended) way to use scalaplot is as a maven dependency. Insert the following in your `pom` file:\r\n\r\n```xml\r\n<repositories>\r\n  <repository>\r\n    <id>dev-iesl.cs.umass.edu</id>\r\n    <name>IESL Nexus repostory</name>\r\n    <url>https://dev-iesl.cs.umass.edu/nexus/content/repositories/releases</url>\r\n  </repository>\r\n  ...\r\n</repositories>\r\n...\r\n<dependencies>\r\n  ...\r\n  <dependency>\r\n    <groupId>org.sameersingh.scalaplot</groupId>\r\n    <artifactId>scalaplot</artifactId>\r\n    <version>0.0.2</version>\r\n  </dependency>\r\n  ...\r\n</dependencies>\r\n```\r\n\r\n## Creating Charts\r\n\r\nCurrently, the library supports line and point (scatter) charts. Let's start with a simple, complete example:\r\n\r\n```scala\r\nimport org.sameersingh.scalaplot.Implicits._\r\n\r\nval x = 0.0 until 2.0 * math.Pi by 0.1\r\noutput(PNG(\"docs/img/\", \"test\"), plot(x ->(math.sin(_), math.cos(_))))\r\n```\r\n\r\nwhich produces\r\n\r\n![Example scalaplot](https://github.com/sameersingh/scalaplot/raw/master/docs/img/test.png)\r\n\r\nwhile\r\n\r\n```scala\r\noutput(ASCII, plot(x ->(math.sin(_), math.cos(_))))\r\n```\r\n\r\nproduces\r\n\r\n```\r\n    1 BBBB------+--AAAAAA-+---------+--------+---------+---------BBB------++\r\n      +   BB    +AA      AAA        +        +         +       BB+         +\r\n  0.8 ++    BB AA           AA                               BB           ++\r\n      |      AA               A                            BB              |\r\n  0.6 ++    A  BB              A                          B               ++\r\n      |    A     B              AA                       B                 |\r\n  0.4 ++  A       B               A                     B                 ++\r\n      |  A         B               A                   B                   |\r\n  0.2 ++A           B               A                 B                   ++\r\n    0 AA             B               A               B                    ++\r\n      |               B               A             B              A       |\r\n -0.2 ++               B               A           B              A       ++\r\n      |                 B               A        BB              A         |\r\n -0.4 ++                 BB              A      B               A         ++\r\n      |                    B             A     B               A           |\r\n -0.6 ++                    B             AA  B              AA           ++\r\n      |                      B              AB              A              |\r\n -0.8 ++                      BB           B AA           AA              ++\r\n      +         +         +     BBB +    BB  + AA      +AA       +         +\r\n   -1 ++--------+---------+--------BBBBBB----+---AAAAAAA---------+--------++\r\n      0         1         2         3        4         5         6         7\r\n```\r\n\r\n### Output Formats\r\n\r\nThe library, of course, supports different output formats. Most of these also produce an accompanying Gnuplot source file, allowing archival and further customization if needed. The current list of formats are:\r\n\r\n```scala\r\noutput(ASCII, plot(...)) // returns the string as above\r\noutput(SVG, plot(...)) // returns the SVG text, which can be embedded in html or saved as a SVG file\r\noutput(PDF(dir, name), plot(...)) // produces dir/name.gpl as the gnuplot source, and attempts dir/name.pdf\r\noutput(PNG(dir, name), plot(...)) // produces dir/name.gpl as the gnuplot source, and attempts dir/name.png\r\noutput(GUI, plot(...)) // opens a window with the plot, which can be modified/exported/resized/etc.\r\n```\r\n\r\nNote that scalaplot calls the `gnuplot` command to render the image in `dir/name.EXT`, but in case it fails, do the following:\r\n\r\n```shell\r\n$ cd dir/\r\n$ gnuplot name.gpl\r\n```\r\n\r\nwhich will create `name.EXT`, where `EXT` is one of `PDF` or `PNG`.\r\n\r\n### Plot\r\n\r\nThe `plot` function is the main entry point for creating charts. The first argument of plot requires a `XYData` object, that we will describe in the next section. The rest of the arguments customize the aspects of the chart that are not data-specific.\r\n\r\n```scala\r\nval d: XYData = ...\r\nplot(d)\r\nplot(d, \"Chart Title!\")\r\nplot(d, x = Axis(label = \"Age\"), y = Axis(log = true))\r\n```\r\n\r\nHere are the relevant definitions and default parameters that you can override:\r\n\r\n```scala\r\ndef plot(data: XYData, title: String = \"\",\r\n           x: NumericAxis = new NumericAxis,\r\n           y: NumericAxis = new NumericAxis,\r\n           pointSize: Option[Double] = None,\r\n           legendPosX: LegendPosX.Type = LegendPosX.Right,\r\n           legendPosY: LegendPosY.Type = LegendPosY.Center,\r\n           showLegend: Boolean = false,\r\n           monochrome: Boolean = false,\r\n           size: Option[(Double, Double)] = None): XYChart\r\ndef Axis(label: String = \"\",\r\n         backward: Boolean = false,\r\n         log: Boolean = false,\r\n         range: Option[(Double, Double)] = None): NumericAxis\r\n```\r\n\r\n### Data\r\n\r\nThe data is the first argument of the plot function, and can be specified in many different ways, depending on the format your data is available in. Primarily, `XYData` consists of multiple sequences of `(Double,Double)` pairs, where each sequence forms a single series (line in line plots). Here are some ways of data can be specified.\r\n\r\nIf you have a single `x` sequence and multiple `y` sequences, you can use:\r\n\r\n```scala\r\n// data\r\nval x = (1 until 100).map(_.toDouble)\r\nval y1 = (1 until 100).map(j => math.pow(j, 1))\r\nval y2 = (1 until 100).map(j => math.pow(j, 2))\r\nval y3 = (1 until 100).map(j => math.pow(j, 3))\r\n\r\nplot(x ->(y1, y2, y3))\r\nplot(x ->(math.sin(_), math.cos(_))) // inline definition\r\nplot(x -> Seq(Y(y1, \"1\"), Y(y2, \"2\"), Y(y3, \"3\"))) // with labels and other possible customizations\r\nplot(x -> Seq(Yf(math.sin, \"sin\"), Yf(math.cos, color = Color.Blue), Yf(math.tan, lw = 3.0))) // Yf for functions\r\n```\r\n\r\nwhere each series can be fully customized using the following:\r\n\r\n```scala\r\ndef Y(yp: Seq[Double],\r\n      label: String = \"Label\",\r\n      style: XYPlotStyle.Type = XYPlotStyle.LinesPoints,\r\n      color: Option[Color.Type] = None,\r\n      ps: Option[Double] = None,\r\n      pt: Option[PointType.Type] = None,\r\n      lw: Option[Double] = None,\r\n      lt: Option[LineType.Type] = None,\r\n      every: Option[Int] = None)\r\ndef Yf(f: Double => Double,\r\n       label: String = \"Label\",\r\n       style: XYPlotStyle.Type = XYPlotStyle.LinesPoints,\r\n       color: Option[Color.Type] = None,\r\n       ps: Option[Double] = None,\r\n       pt: Option[PointType.Type] = None,\r\n       lw: Option[Double] = None,\r\n       lt: Option[LineType.Type] = None,\r\n       every: Option[Int] = None)\r\n```\r\n\r\nIf you have sequences of `(x,y)` pairs as your data, or if you want to use different `x` for each series:\r\n\r\n```scala\r\nplot(List(x -> Y(y1), x -> Y(y2)))\r\nplot(List(x -> Y(y1, \"1\"), x -> Y(y2, color = Color.Blue)))\r\n\r\nval xy1 = x zip y1\r\nval xy2 = x zip y2\r\nplot(List(XY(xy1), XY(xy2)))\r\nplot(List(XY(xy1, \"1\"), XY(xy2, \"2\")))\r\n```\r\n\r\nwhere the customization is similar to above:\r\n\r\n```scala\r\ndef XY(points: Seq[(Double, Double)],\r\n       label: String = \"Label\",\r\n       style: XYPlotStyle.Type = XYPlotStyle.LinesPoints,\r\n       color: Option[Color.Type] = None,\r\n       ps: Option[Double] = None,\r\n       pt: Option[PointType.Type] = None,\r\n       lw: Option[Double] = None,\r\n       lt: Option[LineType.Type] = None,\r\n       every: Option[Int] = None)\r\n```\r\n\r\n### Other Implicits\r\n\r\nScalaplot also supports a number of other implicits to make things easier to use.\r\n\r\n```scala\r\nval d: XYData = x ->(y1, y2, y3)\r\nval c: XYChart = d // automatic conversion from data to chart\r\n\r\n// series\r\nval s1: XYSeries = x -> y1\r\nval s2: XYSeries = x zip y2\r\nval f1 = math.sin(_)\r\nval s1f: XYSeries = x -> f1\r\nval s2f: XYSeries = x -> Yf(math.sin)\r\n\r\n// series to data\r\nval d1: XYData = s1\r\nval d2: XYData = Seq(s1, s2)\r\nval d2l: XYData = s1 :: s2 :: List()\r\n```\r\n\r\n\r\n## Explicit Data Structures\r\n\r\nFor even further customization of the charts, you will need to dive into the API instead of relying on the above *implicits*.\r\n\r\n### XY Line Charts\r\n\r\nFirst step is to get your data into `Seq[Double]`.\r\n\r\n```scala\r\nval x = (1 until 100).map(_.toDouble)\r\nval y = x.map(i => i*i)\r\n```\r\n\r\nCreate a dataset that represents these sequences.\r\n\r\n```scala\r\nval series = new MemXYSeries(x, y, \"Square\")\r\nval data = new XYData(series)\r\n```\r\n\r\nYou can add more series too.\r\n\r\n```scala\r\ndata += new MemXYSeries(x, x.map(i => i*i*i), \"Cube\")\r\n```\r\n\r\nLet's create the chart.\r\n\r\n```scala\r\nval chart = new XYChart(\"Powers!\", data)\r\nchart.showLegend = true\r\n```\r\n\r\n## Rendering Charts\r\n\r\nEven though multiple backends are being supported to render the charts, gnuplot is the most actively developed and supported since it allows post plotting customizations (editing the script files), may possible output formats, and ease of use.\r\n\r\n### Gnuplot\r\n\r\nGenerates gnuplot scripts that will need to be run to actually generate the images.\r\n\r\n```scala\r\nval plotter = new GnuplotPlotter(chart)\r\nplotter.writeToPdf(\"dir/\", \"name\")\r\n```\r\n\t\r\nThe output looks like\r\n\r\n![Example gnuplot output](https://github.com/sameersingh/scalaplot/raw/master/docs/img/gnuplot.png)\r\n\r\n### JFreegraph\r\n\r\nJFreegraph can also be called similarly to produce pdf plots (use `JFGraphPlotter`).\r\nHowever, it also supports a `gui()` option for when you just want to see the graph.\r\n\r\n```scala\r\nval plotter = new JFGraphPlotter(chart)\r\nplotter.gui()\r\n```\r\n\r\nproduces\r\n\r\n![Example jfreegraph output](https://github.com/sameersingh/scalaplot/raw/master/docs/img/jfreegraph.png)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}